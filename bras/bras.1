.\"
.\" This file is part of bras, a program similar to the (in)famous
.\" `make'-utitlity, written in Tcl.
.\"
.\" Copyright (C) 1996 Harald Kirsch, (kir@iitb.fhg.de)
.\"                    Fraunhofer Institut IITB
.\"                    Fraunhoferstr. 1
.\"                    76131 Karlsruhe
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.TH BRAS 1  "|VERDATE|" "Kir" "bras user's manual"

.SH NAME
bras -\ utility for rule base command execution

.SH SYNOPSIS
bras [-f brasfile] [-d] [-e] [-es] [-h] [-n] [-N] [-r] [-s] [-ss] [-v] [var=value] [--] [target ...]

.SH OPTIONS
.IP "-f brasfile"
specifies the rule-file to use.
Defaults are 
.I brasfile
and
.I Brasfile
in that order.

.IP -d
show reasoning, don't execute any commands. This option requests a
detailed description of the reasoning performed by bras and is useful
for debugging.

.IP -e
Normally, all variables from the environment are transfered into
global variables within bras before any brasfiles are read. With 
.IR -e
you request that this happens after all brasfiles have read thereby
allowing the environment to override any variable settings in the
brasfiles. 

.IP -es
requests early sourcing. With this option, 
.I bras
reads rule-files in foreign directories immediately when it encounters
an @-dependency while reading rule-files. Without this option,
rule-files in foreign directories are only read, if the @-dependency
is actually considered as a target.

In a toplevel directory, where the Brasfile contains all the necessary
definitions, e.g. for CFLAGS, you can usually do without
.IR -es ,
and it is particularly faster, if only targets from a certain
subdirectory are requested to be built. If however
.I bras
is started in a subdirectory, it may be helpful to give
.I -es
to trigger inclusion of the toplevel Brasfile. This of course only
works if your Brasfiles contain the necessary logic.


.IP -h
show usage message and exit.

.IP -N
don't execute external commands. External commands are those which are
not built into Tcl, like rm, cat, cp and the like.

.IP -n
don't execute anything.

.IP -r
don't read system's standard rule files. Standard rule files are
.RI |SRCBASE|/rules. system ,
where
.I system
is the result of a call to 
.IR "uname -s" .

.IP -s
silent operation. Instead of printing all commands executed, only
one dot is printed for every command.

.IP -ss
super silent operation. Not even the dots are printed. Only error
messages are shown.

.IP -v
show all command lists (not only external commands). Usually only
external commands are listed before they are executed. With
.I -v
the whole command list is listed before it is executed.

.IP var=value
Your last chance to set global variables within bras before it starts
evaluating rules. These settings override all settings in environment
variables or in any of the brasfiles already read before rule
execution starts. 
.BR HOWEVER ,
brasfiles which are read on demand due to consideration of @-targets
can still override those settings. But it is generally a bad idea
anyway to set global variables in sub-brasfiles.

.SH DESCRIPTION
The utility 
.I bras
is written in Tcl and is inteded to be used similar to the (in)famous
.I make
utility. A rule file, usually called
.I brasfile
contains rules describing when and how certain commands should be
executed to bring a 
.I target
up-to-date. 
.I Bras
reads the file given with option 
.I  -f
or either
.IR brasfile " or " Brasfile .
Using the rules found in the file,
.I bras 
then determines the commands which are necessary to bring the target(s)
listed on the command line up-to-date. If no target was given, the
target of the first rule found in the file is considered.

Depending on the options used, 
.I bras
executes the derived command list with different levels of verbosity,
shows its reasoning or merely shows what it would do.

.SH SEE ALSO
.nf
|DOC|/bras.tex
|DOC|/bras.ps
tcl(n)
.fi
