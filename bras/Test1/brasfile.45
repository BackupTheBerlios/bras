puts "msg: correct ordering of dependency list with pattern rules"
puts "expect: Here the deps are in the wrong order: b.h a.c a.h"
puts "expect: Now the deps are ordered just right: a.c b.h a.h"
puts "expect: making a.o from a.c"
puts "expect: Now the deps are ordered just right: b.c"
puts "expect: making b.o from b.c"

PatternNewer {.*\.o} .c {
  puts "Now the deps are ordered just right: $deps"
  puts "making $target from [lindex $deps 0]"
}

Newer all {a.o b.o} {
  ## nothing to do, but non-empty command supresses warning
}

## a.o has rules, but none has a command. The command is found by
## invoking the pattern rule. The pattern rule also results in an
## additional dependency a.c which should come out in front while the
## already available a.c must disappear in the middle
Newer a.o b.h
Newer a.o a.c
Newer a.o {b.h a.h}

puts "Here the deps are in the wrong order: [GetDeps a.o]"


Exist {a.c a.h b.c b.h} {
  ## pretend to make the targets
}

