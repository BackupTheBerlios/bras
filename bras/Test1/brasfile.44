##
## This brasfile calls itself recursive to simulate two independent
## invocation and verify that things are not done twice. The recursive
## invocation sets env(recursive).
if {![info exist env(recursive)]} {
  puts "msg: trivial test of expandable dependency"
  puts "expect: echo jockel.c jockel.h > jockel.cache"
  puts "expect: cat jockel.cache"
  puts "expect: compile jockel.c into jockel.o"
  puts "expect: touch jockel.o"
  puts "expect: deps = `jockel.c jockel.h'"
  puts "expect: making all"
  puts "expect: ----- Recursive Finished -----"
  puts "expect: cat jockel.cache"
  puts "expect: cat jockel.cache"
  puts "expect: making all"
  puts "expect: rm -f jockel.c jockel.h jockel.cache jockel.o"
}

## This one will be called for two sorts of rules:
## .o <- .c
## .cache <- .c

Defdexpand cdeps {.*\.c} target dep {
  switch -glob -- $target {
    *.o {
      ## for a rule .o <- .c we return the contents of a dependency
      ## cache after making sure it is up-to-date
      set cache [file rootname $dep].cache
      consider $cache
      return [exec cat $cache]
    }
    *.cache {
      ## the cache also depends on a .c . If it exists use its
      ## contents, otherwise return just $dep
      if {[file exist $target]} {
	return [exec cat $target]
      } else {
	return $dep
      }
    }
  }
  return -code error -errorinfo "unknown target `$target'"
}


PatternNewer {.*\.cache} .c {
  ## We only simulate a true mkdepend here
  set base [file rootname $target]
  echo $base.c $base.h > $target
}

PatternNewer {.*\.o} .c {
  puts "compile [lindex $deps 0] into $target"
  touch $target
  puts "deps = `$deps'"
}

bras.exec touch jockel.c jockel.h

Newer all jockel.o {
  puts "making all"
  if {![info exist env(recursive)]} {
    ## this is run only by the toplevel invocation, not by the
    ## recursive one.
    rm -f jockel.c jockel.h jockel.cache jockel.o
  }
}

Exist jockel.h {
  ## This pretends, jockel.h exists
}

# We want to run this twice to see how the cache behaves.
if {![info exist env(recursive)]} {
  bras.exec ../bras -f [info script] -ve recursive=1 \
      >@stdout 2>@stderr <@stdin
  puts "----- Recursive Finished -----"
}
  