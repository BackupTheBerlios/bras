########################################################################
#
# This file is part of bras, a program similar to the (in)famous
# `make'-utitlity, written in Tcl.
#
# Copyright (C) 1996, 1997, 1998, 1999
#                    Harald Kirsch, (kir@iitb.fhg.de)
#                    Fraunhofer Institut IITB
#                    Fraunhoferstr. 1
#                    76131 Karlsruhe
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
########################################################################

#
# Autmatically updated and cached dependencies of a C source file. 
# If you source this file in with 
#   include $::bras::base/cdeps.rule
# dependencies for .c-files will be automatically generated and cached
# in a file with suffix `.dc'.
#
# Please specify in your brasfile the options which let your
# C-compiler emit makefile-dependencies by setting DEPOPTS.
#
getenv DEPOPTS {-M -MG}		;# this for gcc
getenv INCLUDES {}
getenv CC cc

########################################################################
PatternMake {.*\.dc} .c {[oldcache $target $d]} {
  set c [lindex $deps 0]
  set l [join [eval exec "$CC $DEPOPTS $INCLUDES $c" ] \ ]
  set res {}
  foreach x $l {
    if {[string match *: $x]} continue
    if {[string match /usr/* $x]} continue
    lappend res [string trim $x]
  }

  ## write the target
  set out [open $target w]; 
  puts $out $res; 
  close $out
}
########################################################################




if 0 {
# This code was used until 0.8.0


# The following dependency expander is called for .c-files. 

Defdexpand cdeps {.*\.c} target dep {
  ## The name of the dependency cache:
  set dc [file rootname $target].dc

  switch -glob -- $target {
    *.o {
      ## use the cache after making sure it is up-to-date
      consider $dc
      set in [open $dc r]; set r [read $in]; close $in
      puts "cdeps $target -> $r"
      return $r
    }
    *.dc {
      ## set the cache up
      if {![file exist $target]} {return $dep}
      set in [open $dc r]; set r [read $in]; close $in
      puts "cdeps $target -> $r"
      return $r
    }
  }
  puts "cdeps $target -> $dep"
  return $dep
}
      
PatternNewer {.*\.dc} .c {
  set c [lindex $deps 0]
  set l [join [eval exec "$CC $DEPOPTS $INCLUDES $c" ] \ ]
  set res {}
  foreach x $l {
    if {[string match *: $x]} continue
    if {[string match /usr/* $x]} continue
    lappend res [string trim $x]
  }
  echo $res > $target
}
}
########################################################################
##### Local Variables: #
##### mode:tcl #
##### End: #
