
			      ANNOUNCING
			     --- bras ---
		     Rule Base Command Execution
			       with Tcl

I am pleased to announce a new version of bras. 

MAJOR CHANGES SINCE THE LAST PUBLISHED VERSION

o Global variables can be set on the command line like in make, e.g.
  bras CC=egcs
o The `include' command now understands @-syntax, i.e.
  include @..
  will do a `cd ..', include the brasfile found there if it was not
  yet read in, and will change dir to where we started.
o Now I managed to build an rpm.

The distribution  can be found at
   http://wsd.iitb.fhg.de/~kir/brashome/

From there you can download the distribution, read the docs online or
download the documentation (in PostScript). A list of changes to
previous versions is also available.



THE NAME SHALL CHANGE

Since English is not my mother tongue, I managed to give this software
a name which sound a bit strange to native english speakers. Therefore
I would like to give it a new name.

Any suggestions?



WHAT IS THAT BRAS ANYWAY?

Out of frustration caused by several (mis)features of make I decided
the other day that I would like to have a tool which combines 
rule-based and script-like command execution. The result is bras. It
is written in Tcl and the rule-files it uses are also pretty much
Tcl. However, bras defines a set of new Tcl-commands which implement
rule-based command execution.

Main features are:
o rule-controlled command execution, similar to make;
o written in Tcl, no compilation required;
o Tcl-syntax so that commands associated with rules may contain
  control structures;
o dependencies in foreign directories can trigger sourcing rule files
  in that directory, recursive bras-execution is not necessary;
o more than one type of rule: Newer, Exist, Always, DependsFile;
o new types of rules can be easily added;
o distinction between dependencies and mere prerequisites;
o multiple targets in one rule;
o pattern rules which deserve the name;
 
# CVS:
# $Revision: 1.4 $, $Date: 1998/08/11 10:26:14 $
