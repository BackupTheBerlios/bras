
			      ANNOUNCING
			     --- bras ---
		     Rule Base Command Execution
			       with Tcl

I am pleased to announce version 0.99.2 of bras. This is supposed to
be a beta version in preparation of 1.0.0.

If you don't know bras: go to the end of this message for more info.



MAJOR CHANGES SINCE 0.8.0

1) Rules are totally different now although compatibility could be
maintained. A typical rule looks like

  Make bras.dvi {[older bras.dvi bras.tex]} {
    latex bras.tex
  }

Note that the 2nd parameter of `Make' can be just any boolean
expression. The boolean expression is updated only, if the target of
the rule, `bras.dvi' is considered for update. If the expression
yields true, the command, i.e. `latex bras.tex', is executed. The
predicate `older' is one of several predefined
predicates. Implementing new predicates is a easy as writing a
Tcl-proc. 


2) Compatibility with previously available rules like `Always',
`Exist' and `Newer' is maintained. Internally they are mapped onto a
call to `Make'.


3) Bras is now *also* a Tcl-package. It should suffice to put

   package require bras
   namespace import ::bras::*

at the top of your tclsh-, wish-, itcl-, tcl-, bltwish-script to get
access to rule base command execution. Example: In some kind of editor
there are several places where you want to be sure that your current
document is saved to file. Therefore you write a rule along the lines
of 

   Make $myfile {[file-not-currently-saved $target]} {
      save-the-file $target
   }

and whenever you want to be sure that the file is indeed saved, you
simply write:

   consider $myfile

Other interesting applications are engineering applications requiring
lengthy computations with several intermediate results.


  
WHERE CAN I GET IT?

The distribution  can be found at
   http://wsd.iitb.fhg.de/~kir/brashome/

From there you can download the distribution, read the docs online or
download the documentation (in PostScript). A list of changes to
previous versions is also available.


WHAT IS IT ANYWAY?

Out of frustration caused by several (mis)features of make I decided
the other day that I would like to have a tool which combines 
rule-based and script-like command execution. The result is bras. It
is written in Tcl and the rule-files it uses are also pretty much
Tcl. However, bras defines a set of new Tcl-commands which implement
rule-based command execution.

Main features are:
o rule-controlled command execution, similar to make;
o written in Tcl, no compilation required;
o Tcl-syntax so that commands associated with rules may contain
  control structures;
o dependencies in foreign directories can trigger sourcing rule files
  in that directory, recursive bras-execution is not necessary;
o just any boolean expression can be used to define when a target is
  out-of-date. 
o pattern rules which deserve the name;
o explicit invocation of the reasoning process possible;

Send comments and requests for enhancements to kir@iitb.fhg.de .
 
# CVS:
# $Revision: 1.8 $, $Date: 2000/03/14 20:23:58 $
