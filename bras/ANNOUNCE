
			      ANNOUNCING
			     --- bras ---
		     Rule Based Command Execution
			       with Tcl

I am pleased to announce version 1.1.0. 

What's new?

1) The new predicate [updated {a b c ...}] should be used instead of
[older] if the target is not a file name. It returns 1 (true), if any
of a, b, c, ... are out of date. 

2) Fixed a bug regarding @-dependencies where the @ was still prefixed
to the dependency when it was passed to the command of a rule.

3) Added example to demonstrate a setup for multi-platform builts.


WHERE CAN I GET IT?

The distribution  can be found at
   http://wsd.iitb.fhg.de/~kir/brashome/

From there you can download the distribution, read the docs online or
download the documentation (in PostScript). A list of changes to
previous versions is also available.


WHAT IS IT ANYWAY?

Out of frustration caused by several (mis)features of make I decided
the other day that I would like to have a tool which combines 
rule-based and script-like command execution. The result is bras. It
is written in Tcl and the rule-files it uses are also pretty much
Tcl. However, bras defines a set of new Tcl-commands which implement
rule-based command execution.

Main features are:
o rule-controlled command execution, similar to make;
o written in Tcl, no compilation required;
o Tcl-syntax so that commands associated with rules may contain
  control structures;
o dependencies in foreign directories can trigger sourcing rule files
  in that directory, recursive bras-execution is not necessary;
o just any boolean expression can be used to define when a target is
  out-of-date. 
o pattern rules which deserve the name;
o explicit invocation of the reasoning process possible;

Send comments and requests for enhancements to
kirschh@lionbioscience.com .
 
# CVS:
# $Revision: 1.12 $, $Date: 2001/07/29 15:19:36 $
