
			      ANNOUNCING
			     --- bras ---
		     Rule Based Command Execution
			       with Tcl

I am pleased to announce version 1.2.0. 

What's new?

1) The command for a rule can now be .relax. to indicate explictly
that nothing need to be done to bring the rule's target
up-to-date. Use of .relax. suppresses the message
  # making target
for said target.

This is most conveniently used together with the predicate [updated]
which was introduced in 1.1.0 to somehow mimic gnu make's .PHONY
target. 

2) An example was added to demonstrate how [updated] and .relax. work
together. 

The docs were updated to reflect the additional features.


WHERE CAN I GET IT?

The distribution  can be found at
   http://wsd.iitb.fhg.de/~kir/brashome/

From there you can download the distribution, read the docs online or
download the documentation (in PostScript). A list of changes to
previous versions is also available.


WHAT IS IT ANYWAY?

Out of frustration caused by several (mis)features of make I decided
the other day that I would like to have a tool which combines 
rule-based and script-like command execution. The result is bras. It
is written in Tcl and the rule-files it uses are also pretty much
Tcl. However, bras defines a set of new Tcl-commands which implement
rule-based command execution.

Main features are:
o rule-controlled command execution, similar to make;
o written in Tcl, no compilation required;
o Tcl-syntax so that commands associated with rules may contain
  control structures;
o dependencies in foreign directories can trigger sourcing rule files
  in that directory, recursive bras-execution is not necessary;
o just any boolean expression can be used to define when a target is
  out-of-date. 
o pattern rules which deserve the name;
o explicit invocation of the reasoning process possible;

Send comments and requests for enhancements to
kirschh@lionbioscience.com .
 
# CVS:
# $Revision: 1.13 $, $Date: 2001/08/04 16:28:36 $
