########################################################################
#
# This file is part of bras, a program similar to the (in)famous
# `make'-utitlity, written in Tcl.
#
# Copyright (C) 1996 Harald Kirsch, (kir@iitb.fhg.de)
#                    Fraunhofer Institut IITB
#                    Fraunhoferstr. 1
#                    76131 Karlsruhe
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
########################################################################


Bras is very similar to make in that it allows rule-based command
execution. 

MAIN FEATURES
=============

o Bras is implemented as a Tcl-script and currently comprises no more
than about 1000 lines of code.

o A rule file (usually called `brasfile') is basically a Tcl-script
containing calls to the additional Tcl-procedures defined by
bras.

o Tabs are not used as syntactical elements :-)

o There are three types of rules.
  -- Newer-rules are very similar to make's rules and are triggered
     whenever the target does not exist or if one of the dependencies
     is rebuilt or newer than the target.
  -- Exist-rules are triggered only, if the target does not exist.
  -- Always-rules are triggered whenever its target is considered.

o Commands to be executed when a rule is triggered are
tcl-scripts. This has the following advantages compared to make.
  -- Control structures are readily available. For example it is not
     necessary to call a subshell just to loop over a few files.
  -- Variable expansion is a bit more predictable (at least for me :-)
  -- Fewer backslashing is necessary
  -- Regular expressions are readily available.

o Bras has a way to handle dependencies in foreign directories that
  cleanly communicates whether these dependencies need to be rebuild
  or not. Exec'ing of another bras in the foreign directory is not
  necessary. 

o Bras extends the idea of make's suffix (or implicit) rules to
pattern rules. If there is no explicit rule for a given target, a full
regular expression and not merely a suffix is used to determine the
pattern rule to instantiate.

o Bras cannot read makefiles, however it understands the simple
dependencies generated by most C-compilers -M option.

o The documentation is quite good ;-)



KNOWN BUGS and LIMITATIONS
==========================

o I have not yet tested it with a real big project and don't know
anything about bras' performance.

o Brasfiles in different directories don't have their private
scope. This can lead to complications, if they use the same global
variables.

o Platform dependent files for default pattern rules only exist for
Linux and Solaris and are both far from complete (see rules.*)



REMARK
======
I developed bras in my free time. It was my own idea, is not anything
official supported by FhG/IITB and is only remotely connected to my
job. FhG/IITB is merely mentioned because it is the only way to reach
me by email.

On the other hand, this statement does not preclude any future support
of bras by FhG/IITB.




If you like bras, tell others about it, 
if you find bugs or miss features, let me know,
if you simply don't like it due to personal taste, ...


