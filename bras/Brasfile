########################################################################
#
# This is a real-world example of a brasfile. I use it to collect the
# parts to go into the subdirectory published on the WWW.
#
# If you consider only those brasfiles typical which compile some
# code, this one is not typical. Nevertheless some of the features of
# bras are highlighted.
#
# At first this may look like any other Tcl-script. However in the
# second half of this script, there are commands like `Make' or
# `Always' which define rules to be followed by bras.
#
# $Revision: 1.26 $, $Date: 2001/10/21 17:28:10 $
#
########################################################################
if {$::bras::base!="."} {
  puts stderr "run ./bras to make sure the correct version is packed"
  exit 1
}
## The destination for publishing
getenv PUBDIR [file join wsd.iitb.fhg.de:.public_html brashome]

## Where will the .tar.gz go
getenv TGZDIR [file join [glob ~] rpm SOURCES]
set TGZ [file join $TGZDIR bras-$::bras::VERSION.tar.gz]

## Similarly for the binary rpm
getenv RPMDIR [file join [glob ~] rpm RPMS noarch ]
set RPM [file join $RPMDIR bras-$::bras::VERSION-0.noarch.rpm]

########################################################################
# 
# So much for now. Here come the rules.
#                                        (Hier kommt die Maus.)
########################################################################

## Target tgz is nothing but a shortcut to make $TGZ
Make tgz {[true $TGZ]} {
  puts "made $deps"
}

## Target $TGZ is made if it is older than any file known to cvs or
## one of the other files mentioned below.
Make $TGZ {
  [older $target [concat [cvsknown] \
		      @doc/bras.ps @doc/bras.pdf pkgIndex.tcl]]
} {
  ship -F -d $TGZDIR -I doc/bras.ps doc/bras.pdf pkgIndex.tcl \
      -e bras.spec pkgIndex.tcl \
      -ver pkgIndex.tcl
}


## Target rpm is a shortcut to make $RPM
Make rpm {[true $RPM]} {
  puts "made $deps"
}

## Target $RPM is made if it is older than $TGZ. A Newer-rule is
## equivalent to `Make ... {[older $target ...]} 
Newer $RPM $TGZ {
  cd [glob ~/tmp]
  rpm -tb --quiet --target noarch $TGZ
}

## This target copies index.html to a target directory after sed'ing it
Always publish-index {} {
  sed -e "s/|BRASTARGZ|/[file tail $TGZ]/g" \
      -e "s/|BRASRPM|/[file tail $RPM]/g" index.html >index.tmp
  scp index.tmp [file join $PUBDIR index.html] 2>@stderr
  scp dir.ttml $PUBDIR 2>@stderr
}

Always publish [concat $RPM doc/bras.ps.gz @doc/bras.pdf publish-index] {
  scp Brasfile [file join $PUBDIR brasfile.exa] 2>@stderr
  scp doc/bras.ps.gz doc/bras.pdf $PUBDIR 2>@stderr
  tar xzfO $TGZ bras-$::bras::VERSION/CHANGES >CHANGES
  scp $TGZ $RPM CHANGES $PUBDIR 2>@stderr
  rm CHANGES
}  


##
## Pattern Rules
##

## A simple pattern rule to gzip files. The procedure
## ::bras::gendep::.withoutgz describes how to derive a dependency from
## the given target.
proc ::bras::gendep::.withoutgz {target} {
  return [file root $target]
}
PatternMake .*\.gz .withoutgz {[older $target $d]} {
  ## We use redirection because gzip otherwise removes the dependency
  gzip <$d >$target
}

